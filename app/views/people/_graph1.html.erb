<script type="text/javascript">
  var CoefConvRubyToJSDate = 1000;

  var SinusCalculateStep;
  var SinusCalculateStepYear = 1000000;
  var SinusCalculateStepMonth = 100000;

  var MaxDateStr           = '2064-01-01';
  var MaxDateStrYear       = '2064-01-01';
  var MaxDateStrMonth      = '2034-01-01';

  var yearPeriod = 1;
  var monthPeriod = 14;

  var graphTypeYear = 1;
  var graphTypeMonth = 2;

  var plot;
  var overview;
  var options;
  var data;
  
  var datasets = {};
  var datasetsOtherPerson = {};
  var yearDatasets = {};
  var monthDatasets = {};
  var yearDatasetsOtherPerson = {};
  var monthDatasetsOtherPerson = {};

  var choiceTable;
  var choiceTableOtherPerson;
  var otherPersons;

  var maxDate;
  var maxDateYear = Number(new Date(MaxDateStrYear)) / 1000;
  var maxDateMonth = Number(new Date(MaxDateStrMonth)) / 1000;

  var birthYear;
  var birthYearOtherPerson;

  function rgbToHex(R,G,B) {return toHex(R)+toHex(G)+toHex(B)}

  function toHex(n) 
  {
      n = parseInt(n,10);
      if (isNaN(n)) return "00";
      n = Math.max(0,Math.min(n,255));
      return "0123456789ABCDEF".charAt((n-n%16)/16)
        + "0123456789ABCDEF".charAt(n%16);
  }

  var redColor   = "#" + rgbToHex(150, 0, 0);
  var greenColor = "#" + rgbToHex(0, 150, 0);
  var blueColor  = "#" + rgbToHex(0, 0, 150);
  var grayColor  = "#" + rgbToHex(150, 150, 150);

  function getRandomInt(min, max)
  {
      return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  // Генерация точек для синуса
  function genPointsToSinus(LeftEndPoint, RightEndPoint, Step, XCoeff, Offset, CoordZero)
  {
      var Points = [];
      for(var i = LeftEndPoint - CoordZero; i < RightEndPoint - CoordZero; i += Step)
      {
          Points.push([(i + CoordZero) * CoefConvRubyToJSDate, Math.sin(XCoeff * i - Offset)]);
      }
      return Points;
  }

  // Генерация точек для графика (минусы, плюсы и тд)
  function genOtherPoints(BirthDate, MemoryDate1, MemoryDate2, EndPoint, Zero, T1, T2)
  {

      var CtrlPoints  = [];
      var MinusPoints = [];
      var PlusPoints  = []; 
      var ZeroPoints  = [];
      var counter = 0;
      var IsPositive = false;

      CtrlPoints.push([MemoryDate1 * CoefConvRubyToJSDate, 0]);
      CtrlPoints.push([MemoryDate2 * CoefConvRubyToJSDate, 0]);

      for(var i = BirthDate; i < Zero; i += T2 / 2)
      {
          if(counter % 2 == 0)
          {
              if(IsPositive) PlusPoints.push([i * CoefConvRubyToJSDate, 0]);
              else MinusPoints.push([i * CoefConvRubyToJSDate, 0]);
              IsPositive = !IsPositive;
          }
          else
          {
              ZeroPoints.push([i * CoefConvRubyToJSDate,   0]);
          }
          counter++;
      }

      for(var i = Zero; i <= EndPoint; i += T1 / 2)
      {
          if(counter % 2 == 0)
          {
              if(IsPositive) PlusPoints.push([i * CoefConvRubyToJSDate, 0]);
              else MinusPoints.push([i * CoefConvRubyToJSDate, 0]);
              IsPositive = !IsPositive;
          }
          else
          {
              ZeroPoints.push([i * CoefConvRubyToJSDate,   0]);
          }
          counter++;
      }

      var AllPoints = 
      {
          "CtrlPoints"  : CtrlPoints,
          "MinusPoints" : MinusPoints,
          "PlusPoints"  : PlusPoints,
          "ZeroPoints"  : ZeroPoints
      }

      return AllPoints;
  }

  // Генерация хэша с точками в необходимом для плота виде
  function pointsToLife(Label, Data, Color)
  {
      return {
        label: Label,
        data: Data,
        color: Color
      };
  }

  // Генерация хэша с точками для синусов в необходимом для плота виде
  function pointsToGraph(Data, Color)
  {
      return { 
          data: Data,
          lines: { show: false },
          points: 
          { 
            show: true,
            radius: 3,
            lineWidth: 2, // in pixels
            fill: false,
            fillColor: Color,
            symbol: "circle" // or callback
          },
          color: Color
      };
  }

  // Создание хэша с графом линии жизни (Линия + точки)
  function lifeInit(BirthDate, EndPoint, personType, graphType)
  {
      var Graph  = {};
      var GraphPoints = [];
      var Points = [];

      var BDate  = new Date(BirthDate * CoefConvRubyToJSDate);
      var EndDate = new Date(EndPoint * CoefConvRubyToJSDate);
      var Multiply = ((BDate.getMonth() + 1) * 100 + BDate.getDate()) * BDate.getFullYear();
      var MultiplyStr = Multiply.toString();
      var counter = 0;
      var len = MultiplyStr.length;

      BDate = new Date(BDate.getFullYear(), 0, 1);

      while(BDate < EndDate)
      {
          GraphPoints.push([BDate.valueOf(), (MultiplyStr[counter].charCodeAt(0) - "0".charCodeAt(0)) / 4 + 2.5]);

          if(graphType == graphTypeYear)
          {
              BDate.setFullYear(BDate.getFullYear() + 1);
          }
          else
          {
              BDate.setMonth(BDate.getMonth() + 1);
          }
          counter++;
          if(counter == len) counter = 0;
      }

      if(personType == 1)
      {
        Graph["Sinus"] = 
        {
            data: GraphPoints,
            lines: { show: false },
            points: { show: true },
            dashes: { show: true, dashLength: 5, lineWidth: 1 }
        };
      }
      else
      {
        Graph["Sinus"] = 
        {
            data: GraphPoints,
            lines: { show: true },
            points: { show: true },
            dashes: { show: false }
        };
      }

      Graph["CtrlPoints"] = {};
      Graph["Minus"] = {};
      Graph["Plus"] = {};
      Graph["Zero"] = {};

      return Graph;

  }

  function labelInit(personType)
  {
      var Graph  = {};
      var Points = [];

      Graph["Sinus"] = {};

      if(personType == 0)
      {
          Graph["CtrlPoints"] = pointsToLife("Точки, определившие период синусоиды", Points, greenColor);
          Graph["Minus"] = pointsToLife("Минусы", Points, redColor);
          Graph["Plus"] = pointsToLife("Плюсы", Points, blueColor);
          Graph["Zero"] = pointsToLife("Нули", Points, grayColor);
      }
      else 
      {
          Graph["CtrlPoints"] = {};
          Graph["Minus"] = {};
          Graph["Plus"] = {};
          Graph["Zero"] = {};
      }

      return Graph;

  }

  // Создание графика синуса
  function graphInit(BirthDate, MemoryDate1, MemoryDate2, EndPoint, period, personType)
  {
      if(period == 1) 
      {
          sinusCalculateStep = SinusCalculateStepYear;
      }
      else
      {
          sinusCalculateStep = SinusCalculateStepMonth;
      }

      var Graph = {};
      var Zero = MemoryDate1;
      var T    = (MemoryDate2 - MemoryDate1) / period;
      var XCoeff      = 2 * Math.PI / T;
      var GraphPoints = [];

      while(Zero - BirthDate > T * period)
      {
          Zero = Zero - T * period;
      }

      var PreXCoeff = period * 2 * Math.PI / (Zero - BirthDate);
      GraphPoints = GraphPoints.concat(
          genPointsToSinus(BirthDate, Zero, sinusCalculateStep, PreXCoeff, Math.PI, Zero),
          genPointsToSinus(Zero, EndPoint, sinusCalculateStep, XCoeff, Math.PI, Zero)
        );

      var OtherPoints = genOtherPoints(BirthDate, MemoryDate1, MemoryDate2, EndPoint, Zero, T, (Zero - BirthDate) / period);

      if(personType == 1)
      {
        Graph["Sinus"] = 
        {
            data: GraphPoints,
            lines: { show: false },
            points: { show: false },
            dashes: { show: true, dashLength: 5, lineWidth: 1 }
        };
      }
      else
      {
        Graph["Sinus"] = 
        {
            data: GraphPoints,
            lines: { show: true },
            points: { show: false },
            dashes: { show: false }
        };
      }

      Graph["CtrlPoints"] = pointsToGraph(OtherPoints["CtrlPoints"], greenColor);
      Graph["Minus"] = pointsToGraph(OtherPoints["MinusPoints"], redColor);
      Graph["Plus"] = pointsToGraph(OtherPoints["PlusPoints"], blueColor);
      Graph["Zero"] = pointsToGraph(OtherPoints["ZeroPoints"], grayColor);

      return Graph;

  }

  function getDate(DateWithSign)
  {
      return DateWithSign[0];
  }

  function getSign(DateWithSign)
  {
      return DateWithSign[1];
  }

  function getDescription(DateWithSign)
  {
      return DateWithSign[2];
  }

  function setLines(dataSets, Graph, label)
  {
      dataSets[label] = 
      {
          "Sinus" : Graph["Sinus"],
          "Minus" : Graph["Minus"],
          "Zero"  : Graph["Zero"],
          "Plus"  : Graph["Plus"],
          "CtrlPoints" : Graph["CtrlPoints"]
      }
  }

  // Создать датасет для персоны с указанным периодом
  function createDatasets(BirthDate, MaxDate, Dates, period, personType, graphType)
  {

      var Datasets = {};

      setLines(Datasets, lifeInit(BirthDate, MaxDate, personType, graphType), "Дискретизация");
      setLines(Datasets, labelInit(personType), "Легенда");

      var graphCount = 1;

      for(var i = 0; i < Dates.length - 1; i++)
      {
          for(var j = i + 1; j < Dates.length; j++)
          {
              if(getSign(Dates[i]) != getSign(Dates[j]))
              {
                  var Graph = graphInit(BirthDate, getDate(Dates[i]), getDate(Dates[j]), MaxDate, period, personType);

                  var label = "График ";

                  setLines(Datasets, Graph, label + graphCount.toString());

                  graphCount++;
              }
          }
      }

      return Datasets;
  }

  // Забивает в датасеты второго человека и делает для него чекбоксы
  function upgradePlotByOtherPerson(otherPersonId)
  {

      var choiceTableStr = "";

      choiceTableOtherPerson.empty();

      choiceTableStr += "<table class= 'legendtable'>";

      <% Person.all.each do |per| %>
          if(<%= per.id %> == otherPersonId)
          {
              var dates = <%= raw per.get_dates_with_signs %>;
              var birthDate = <%= per.get_birth %>;
              birthYearOtherPerson = new Date((new Date(birthDate * CoefConvRubyToJSDate)).getFullYear(), 0, 1);
              

              yearDatasetsOtherPerson = createDatasets(birthDate, maxDateYear, dates, yearPeriod, 1, graphTypeYear);
              monthDatasetsOtherPerson = createDatasets(birthDate, maxDateMonth, dates, monthPeriod, 1, graphTypeMonth);       
      
              choiceTableStr += "<%= per.name %>";
              choiceTableStr += "<thead>";
              choiceTableStr += "<tr><th>Показать</th><th>Цвет</th><th>Подпись</th></tr>";
              choiceTableStr += "</thead>";

              $.each(yearDatasetsOtherPerson, function(key, val)
              { 
                  if(key != "Легенда")
                  {
                      var r = 0;
                      var g = 0;
                      var b = 0;
                      if(key != "Дискретизация")
                      {
                          r = getRandomInt(0, 255);
                          g = getRandomInt(0, 255);
                          b = getRandomInt(0, 255);
                      }
                      else
                      {
                          r = 0;
                          g = 0;
                          b = 0;
                      }

                      val["Sinus"].color = "#" + rgbToHex(r, g, b);
                      monthDatasetsOtherPerson[key]["Sinus"].color = val["Sinus"].color;

                      choiceTableStr += "<tr>";

                      choiceTableStr += 
                      "<td>" +
                          "<input type='checkbox' name='" + key + "' id='id" + key + "'></input>" +
                      "</td>" + 
                      "<td>" +
                          "<div style='width:14px; border:1px solid #ccc;padding:1px'>" + 
                            "<div style='width:4px;height:0;border:5px solid rgb(" + 
                            Math.floor(r).toString() + "," + 
                            Math.floor(g).toString() + "," + 
                            Math.floor(b).toString() +  
                            ");overflow:hidden'></div>" +
                          "</div>" + 
                      "</td>" +
                      "<td>" +
                          key +
                      "</td>";

                      choiceTableStr += "</tr>";

                  }
              }); 
          }
      <% end %>

      choiceTableStr += "</table>";

      choiceTableOtherPerson.append(choiceTableStr);

      choiceTable.find("input").click(plotAccordingToChoicesCheck);
      choiceTableOtherPerson.find("input").click(plotAccordingToChoicesCheck);;
  }

  function setDataSet(DSet, DSetOtherPerson)
  {
      var otherPersonId = $('select[name=otherPersons]').val();

      datasets = DSet;

      if(otherPersonId != -1)
      {
            datasetsOtherPerson = DSetOtherPerson;
      }
  }

  function pushToData(DSets, Key)
  {
      data.push(DSets[Key]["Sinus"]);
      data.push(DSets[Key]["Minus"]);
      data.push(DSets[Key]["Plus"]);
      data.push(DSets[Key]["Zero"]);
      data.push(DSets[Key]["CtrlPoints"]);
  }

  function choices()
  {
      var graphType = $('input[name=graphType]:checked').val();

      var otherPersonId = $('select[name=otherPersons]').val();

      if(otherPersonId == -1)
        birthYearOtherPerson = Number(new Date(MaxDateStr));    

      datasetsOtherPerson = {};

      if(graphType == graphTypeYear)
      {
          setDataSet(yearDatasets, yearDatasetsOtherPerson);
          maxDate = maxDateYear;
      }
      else
      {
          setDataSet(monthDatasets, monthDatasetsOtherPerson);
          maxDate = maxDateMonth;
      }

      data = [];

      choiceTable.find("input:checked").each(function () 
      {
          var key = $(this).attr("name");
          if (key && datasets[key]) 
          {
              pushToData(datasets, key);
          }
      });

      pushToData(datasets, "Легенда");

      choiceTableOtherPerson.find("input:checked").each(function () 
      {
          var key = $(this).attr("name");
          if (key && datasetsOtherPerson[key]) 
          {
              pushToData(datasetsOtherPerson, key);
          }

      });

      var startDate =  Math.min(birthYear.valueOf(), birthYearOtherPerson.valueOf());
      var endDate = maxDate * CoefConvRubyToJSDate;
      var startDateDate = new Date(startDate);
      var labelStr = "";

      var xticks = [];
      if(graphType == graphTypeYear)
      {
          for(i = new Date(startDate); i < new Date(endDate); i.setFullYear(i.getFullYear() + 1))
          {
              if( ( i.valueOf() == (new Date(startDate)).valueOf() ) || ( i.getFullYear() % 10 == 0 ) )
              {
                  xticks.push([i.valueOf(), "<b class='yearLabel'>" + i.getFullYear().toString() + "</b>"]);
              }
              else
              {
                  if(startDateDate.getFullYear() < 1960 &&
                     (i.getFullYear() % 10 == 1 || i.getFullYear() % 10 == 9 || i.getFullYear() == startDateDate.getFullYear() + 1))
                  {
                      labelStr = "";
                  }
                  else
                  {
                      labelStr = (i.getYear() % 10).toString();
                  }
                  xticks.push([i.valueOf(), labelStr]);
              }
          }
      }
      else
      {
          for(i = new Date(startDate); i < new Date(endDate); i.setMonth(i.getMonth() + 1))
          {
              if(i.getMonth() == 0 || i.valueOf() == (new Date(startDate)).valueOf())
              {
                  xticks.push([i.valueOf(), "<b class='monthLabel'>" + i.getFullYear().toString() + "</b>"]);
              }
              else if(i.getMonth() % 2 == 0)
              {
                  labelStr = i.getMonth().toString();
                  if(i.getMonth() <= 9 && i.getMonth() >= 3)
                  {
                      xticks.push([i.valueOf(), "<text class='monthLabel39'>" + labelStr + "</text>"]);
                  }
                  else
                  {
                      if(startDateDate.getFullYear() < 1985)
                      {
                          labelStr = "";
                      }
                      if(i.getMonth() > 9 )
                      {
                          xticks.push([i.valueOf(), "<text class='monthLabelMore9'>" + labelStr + "</text>"]);
                      }
                      else 
                      {
                          xticks.push([i.valueOf(), "<text class='monthLabelLess3'>" + labelStr + "</text>"]);
                      }
                  }
              }
          }
      }

      options = 
      {
          lines: 
          {
              show: true,
              lineWidth: 1
          },
          yaxis:
          {
              show: true,
              panRange: [-1.5, 7],
              zoomRange: [1, 1],
              min: -1.5,
              max: 7,
              ticks: 
              [
                  [ 0, "" ], [ -1, ""], [1, ""], [2.5, "0"], 
                  [2.75, "1"], [3, "2"], [3.25, "3"], [3.5, "4"],
                  [3.75, "5"], [4, "6"], [4.25, "7"], [4.5, "8"],
                  [4.75, "9"]
              ]
          },
          xaxis: 
          {
              panRange: [startDate, endDate],
              ticks: xticks
          },
          pan: 
          {
              interactive: true
          }
      };

      plot = $.plot("#placeholder", data, options);

      if(graphType == graphTypeMonth)
      {
          plot.zoom({ center: { left: -1300, top: 1} });
      }
      else
      {
          plot.zoom({ center: { left: -700, top: 1} });
      }

  }

  function plotAccordingToChoicesCheck()
  {
      choices();
  } 

  // Внесение изменений на страницу (Чекбоксы, радиокнопки)
  // А так же отрисовка графа после изменений
  function plotAccordingToChoicesChangePerson() 
  {
      var otherPersonId = $('select[name=otherPersons]').val();

      upgradePlotByOtherPerson(otherPersonId);

      choices();
  }

  function plotAccordingToChoicesGraphType() 
  {
      var otherPersonId = $('select[name=otherPersons]').val();

      //upgradePlotByOtherPerson(otherPersonId);

      choices();
  }

  function drawChoicesTable()
  {
      var htmlStr = "";
      htmlStr = "<table class= 'legendtable'>";
      htmlStr += "<%= @person.name %>";
      htmlStr += "<thead>";
      htmlStr += "<tr><th>Показать</th><th>Цвет</th><th>Подпись</th></tr>";
      htmlStr += "</thead>";

      $.each(yearDatasets, function(key, val)
      { 
          if(key != "Легенда")
          {
              var r = 0;
              var g = 0;
              var b = 0;
              if(key != "Дискретизация")
              {
                  r = getRandomInt(0, 255);
                  g = getRandomInt(0, 255);
                  b = getRandomInt(0, 255);
              }
              else
              {
                  r = 0;
                  g = 0;
                  b = 0;
              }

              val["Sinus"].color = "#" + rgbToHex(r, g, b);
              monthDatasets[key]["Sinus"].color = val["Sinus"].color;

              htmlStr += "<tr>";

              htmlStr += 
              "<td>" +
                  "<input type='checkbox' name='" + key + "' id='id" + key + "'></input>" +
              "</td>" + 
              "<td>" +
                  "<div style='width:14px; border:1px solid #ccc;padding:1px'>" + 
                    "<div style='width:4px;height:0;border:5px solid rgb(" + 
                    Math.floor(r).toString() + "," + 
                    Math.floor(g).toString() + "," + 
                    Math.floor(b).toString() +  
                    ");overflow:hidden'></div>" +
                  "</div>" + 
              "</td>" +
              "<td>" +
                  key +
              "</td>";

              htmlStr += "</tr>";
          }
      });  

      htmlStr += "</table>";

      choiceTable.append(htmlStr);
  }


  $(function() {

      var htmlStr = "";

      personSelecter = $("#otherPersons");
      otherPersons = <%= raw @person.get_person_names %>;

      htmlStr += "<option value=" +  "-1" +  ">" + "Без второй персоны" + "</option>";

      for(var i = 0; i < otherPersons.length; i++)
      {
          htmlStr += "<option value=" +  otherPersons[i][0].toString() +  ">" + otherPersons[i][1] + "</option>";
      }

      personSelecter.append(htmlStr);

      var dates = <%= raw @person.get_dates_with_signs %>;
      var birthDate = <%= @person.get_birth %>;

      birthYear = new Date((new Date(birthDate * CoefConvRubyToJSDate)).getFullYear(), 0, 1);
      

      yearDatasets = createDatasets(birthDate, maxDateYear, dates, yearPeriod, 0, graphTypeYear);
      monthDatasets = createDatasets(birthDate, maxDateMonth, dates, monthPeriod, 0, graphTypeMonth);

      choiceTable = $("#choicestable");
      choiceTableOtherPerson = $("#choicestableotherperson");
       
      drawChoicesTable();

      choiceTable.find("input").click(plotAccordingToChoicesCheck);
      choiceTableOtherPerson.find("input").click(plotAccordingToChoicesCheck);

      plotAccordingToChoicesCheck();

  });

 </script>

<p id="peopleselect" class= "peopleselecter"></p>

<div id="content">

    <table id="navigationTable" style="border:0px;">
        <tr>
            <td style="padding:10px; vertical-align: top;">
                Вторая персона:<br/>
                <select name="otherPersons" id="otherPersons" onchange="plotAccordingToChoicesChangePerson()">
                </select>
                <br/>

                <input id = "graphType1" type="radio" name="graphType" value=1 onClick="plotAccordingToChoicesGraphType()" checked> Годовой график <br>
                <input id = "graphType2" type="radio" name="graphType" value=2 onClick="plotAccordingToChoicesGraphType()"> Месячный график
            </td>
            <td style="padding:10px; vertical-align: top;">
                <div id='choicestable'></div>
            </td>
            <td style="padding:10px; vertical-align: top;">
                <div id='choicestableotherperson'></div>
            </td>
        </tr>
    </table>

    <div class="demo-container">
      <div id="placeholder" class="demo-placeholder" style="float:left; height: 460px;"></div>
    </div>

</div>