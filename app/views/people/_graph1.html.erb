<script type="text/javascript">
  var CoefConvRubyToJSDate = 1000;
  var SinusCalculateStep   = 1000000;
  var MaxDateStr           = '2064-01-01';
  var plot;
  var overview;
  var options;
  var data;

  function rgbToHex(R,G,B) {return toHex(R)+toHex(G)+toHex(B)}

  function toHex(n) 
  {
    n = parseInt(n,10);
    if (isNaN(n)) return "00";
    n = Math.max(0,Math.min(n,255));
    return "0123456789ABCDEF".charAt((n-n%16)/16)
      + "0123456789ABCDEF".charAt(n%16);
  }

  var redColor   = "#" + rgbToHex(150, 0, 0);
  var greenColor = "#" + rgbToHex(0, 150, 0);
  var blueColor  = "#" + rgbToHex(0, 0, 150);
  var grayColor  = "#" + rgbToHex(150, 150, 150);

  function getRandomInt(min, max)
  {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  function genPointsToSinus(LeftEndPoint, RightEndPoint, Step, XCoeff, Offset, CoordZero)
  {
    var Points = [];
    for(var i = LeftEndPoint - CoordZero; i < RightEndPoint - CoordZero; i += Step)
    {
      Points.push([(i + CoordZero) * CoefConvRubyToJSDate, Math.sin(XCoeff * i - Offset)]);
    }
    return Points;
  }

  function genOtherPoints(BirthDate, MemoryDate1, MemoryDate2, EndPoint, Zero, T)
  {
    var CtrlPoints  = [];
    var MinusPoints = [];
    var PlusPoints  = []; 
    var ZeroPoints  = [];
    var counter = 0;
    var IsPositive = new Boolean(true);
    MinusPoints.push([BirthDate * CoefConvRubyToJSDate,   0]);
    ZeroPoints.push( [(BirthDate + (Zero - BirthDate) / 2) * CoefConvRubyToJSDate,   0]);
    CtrlPoints.push([MemoryDate1 * CoefConvRubyToJSDate, 0]);
    CtrlPoints.push([MemoryDate2 * CoefConvRubyToJSDate, 0]);
    for(var i = Zero; i <= EndPoint; i += T / 2)
    {
      if(i != MemoryDate1 && i != MemoryDate2)
      {
        if(counter % 2 == 0)
        {
          if(IsPositive) PlusPoints.push([i * CoefConvRubyToJSDate, 0]);
          else MinusPoints.push([i * CoefConvRubyToJSDate, 0]);
          IsPositive = !IsPositive;
        }
        else
        {
          ZeroPoints.push([i * CoefConvRubyToJSDate,   0]);
        }
      }
      counter++;
    }
    var AllPoints = 
    {
      "CtrlPoints"  : CtrlPoints,
      "MinusPoints" : MinusPoints,
      "PlusPoints"  : PlusPoints,
      "ZeroPoints"  : ZeroPoints
    }
    return AllPoints;
  }

  function pointsToLife(Label, Data, Color)
  {
    return { 
      label: Label,
      data: Data,
      color: Color
    };
  }

  function pointsToGraph(Data, Color)
  {
    return { 
      data: Data,
      lines: { show: false },
      points: 
      { 
        show: true,
        radius: 3,
        lineWidth: 2, // in pixels
        fill: false,
        fillColor: Color,
        symbol: "circle" // or callback
      },
      color: Color
    };
  }

  function lifeInit(BirthDate, EndPoint)
  {
    var Graph  = {};
    var GraphPoints = [];
    var Points = [];

    var BDate  = new Date(BirthDate * CoefConvRubyToJSDate);
    var EndDate = new Date(EndPoint * CoefConvRubyToJSDate);
    var Multiply = (BDate.getDate() * 100 + (BDate.getMonth() + 1)) * BDate.getFullYear();
    var MultiplyStr = Multiply.toString();
    var counter = 0;
    var len = MultiplyStr.length;

    BDate = new Date(BDate.getFullYear(), 0, 1);

    while(BDate < EndDate)
    {
      GraphPoints.push([BDate.valueOf(), (MultiplyStr[counter].charCodeAt(0) - "0".charCodeAt(0)) / 4 + 2.5]);

      BDate = new Date(BDate.getFullYear() + 1, 0, 1);
      counter++;
      if(counter == len) counter = 0;
    }

    Graph["Sinus"] = 
    {
        data: GraphPoints,
        lines: { show: true },
        points: { show: true }
    };
    Graph["CtrlPoints"] = pointsToLife("Точки, определившие период синусоиды", Points, greenColor);
    Graph["Minus"] = pointsToLife("Минусы", Points, redColor);
    Graph["Plus"] = pointsToLife("Плюсы", Points, blueColor);
    Graph["Zero"] = pointsToLife("Нули", Points, grayColor);

    return Graph;
  }

  function graphInit(BirthDate, MemoryDate1, MemoryDate2, EndPoint)
  {
    var Graph = {};
    <!--За ноль координат принимаем найденный ноль,-->
    <!--так как главный период синусоиды начинается именно оттуда-->
    var Zero = MemoryDate1;
    var T    = MemoryDate2 - MemoryDate1;
    var XCoeff      = 2 * Math.PI / T;
    var GraphPoints = [];

    <!--Ищем 0, самый близкий к дате рождения-->
    <!--Чтобы провести до него 1 период синусоиды-->
    <!--Дальше синусоида пойдет в соответствии с опорными точками-->
    while(Zero - BirthDate > T)
    {
      Zero = Zero - T;
    }

    var PreXCoeff = 2 * Math.PI / (Zero - BirthDate);
    GraphPoints = GraphPoints.concat(
        genPointsToSinus(BirthDate, Zero, SinusCalculateStep, PreXCoeff, Math.PI, Zero),
        genPointsToSinus(Zero, EndPoint, SinusCalculateStep, XCoeff, Math.PI, Zero)
      );

    var OtherPoints = genOtherPoints(BirthDate, MemoryDate1, MemoryDate2, EndPoint, Zero, T);

    Graph["Sinus"] = 
    {
      data: GraphPoints,
      lines: { show: false },
      points: { show: false },
      dashes: { show: true, dashLength: 5, lineWidth: 1 }
    };
    Graph["CtrlPoints"] = pointsToGraph(OtherPoints["CtrlPoints"], greenColor);
    Graph["Minus"] = pointsToGraph(OtherPoints["MinusPoints"], redColor);
    Graph["Plus"] = pointsToGraph(OtherPoints["PlusPoints"], blueColor);
    Graph["Zero"] = pointsToGraph(OtherPoints["ZeroPoints"], grayColor);

    return Graph;
  }

  function getDate(DateWithSign)
  {
    return DateWithSign[0];
  }

  function getSign(DateWithSign)
  {
    return DateWithSign[1];
  }

  function setLines(dataSets, Graph, label)
  {
    dataSets[label] = 
    {
      "Sinus" : Graph["Sinus"],
      "Minus" : Graph["Minus"],
      "Zero"  : Graph["Zero"],
      "Plus"  : Graph["Plus"],
      "CtrlPoints" : Graph["CtrlPoints"]
    }
  }

  $(function() {

    var dates = <%= @person.get_dates_with_signs %>;
    var maxDate = Number(new Date(MaxDateStr)) / 1000;
    var birthDate = <%= @person.get_birth %>;
    var birthYear = new Date((new Date(birthDate * CoefConvRubyToJSDate)).getFullYear(), 0, 1);
    var datasets = {};
    var yearDatasets = {};
    var monthDatasets = {};

    var colorsCount = 0;
    setLines(datasets, lifeInit(birthDate, maxDate), "Дискретизация")

    for(var i = 0; i < dates.length - 1; i++)
    {
      for(var j = i + 1; j < dates.length; j++)
      {
        if(getSign(dates[i]) != getSign(dates[j]))
        {
          var Graph = graphInit(birthDate, getDate(dates[i]), getDate(dates[j]), maxDate);
          setLines(datasets, Graph, (new Date(getDate(dates[i]) * CoefConvRubyToJSDate)).toLocaleDateString() + 
            ", " + (new Date(getDate(dates[j]) * CoefConvRubyToJSDate)).toLocaleDateString());
          colorsCount++;
        }
      }
    }

    var colorsCounter = 0;
    var choiceContainer = $("#choicestable");
    var htmlStr = "";

    htmlStr += "<thead>";
    htmlStr += "<tr><th>Показать</th><th>Цвет</th><th>Подпись</th></tr>";
    htmlStr += "</thead>";
    $.each(datasets, function(key, val)
    {
      var r = 0;
      var g = 0;
      var b = 0;
      if(key != "Дискретизация")
      {
        r = getRandomInt(0, 255);
        g = getRandomInt(0, 255);
        b = getRandomInt(0, 255);
        colorsCounter++;
      }
      else
      {
        r = 0;
        g = 0;
        b = 0;
      }

      val["Sinus"].color = "#" + rgbToHex(r, g, b);

      htmlStr += "<tr>";

      htmlStr += 
      "<td>" +
        "<input type='checkbox' name='" + key + "' checked='checked' id='id" + key + "'></input>" +
      "</td>" + 
      "<td>" +
        "<div style='width:14px; border:1px solid #ccc;padding:1px'>" + 
          "<div style='width:4px;height:0;border:5px solid rgb(" + 
          Math.floor(r).toString() + "," + 
          Math.floor(g).toString() + "," + 
          Math.floor(b).toString() +  
          ");overflow:hidden'></div>" +
        "</div>" + 
      "</td>" +
      "<td>" +
        key +
      "</td>";

      htmlStr += "</tr>";
    });  

    choiceContainer.append(htmlStr); 


    function plotAccordingToChoices() 
    {

      data = [];

      choiceContainer.find("input:checked").each(function () 
      {
        var key = $(this).attr("name");
        if (key && datasets[key]) 
        {
            data.push(datasets[key]["Sinus"]);
            data.push(datasets[key]["CtrlPoints"]);
            data.push(datasets[key]["Minus"]);
            data.push(datasets[key]["Plus"]);
            data.push(datasets[key]["Zero"]);
        }
      });

      options = 
      {
          lines: 
          {
            show: true,
            lineWidth: 1
          },
          yaxis:
          {
            show: true,
            panRange: [-1.5, 7],
            zoomRange: [1, 1],
            min: -1.5,
            max: 7,
            ticks: 
            [
              [ 0, "" ], [ -1, ""], [1, ""], [2.5, "0"], 
              [2.75, "1"], [3, "2"], [3.25, "3"], [3.5, "4"],
              [3.75, "5"], [4, "6"], [4.25, "7"], [4.5, "8"],
              [4.75, "9"]
            ]
          },
          xaxis: 
          {
              mode: "time",
              timeformat: "%d/%m/%Y",
              panRange: [birthYear.valueOf(), maxDate * CoefConvRubyToJSDate],
              position: 'bottom'
          },
          zoom: 
          {
            interactive: true
          },
          pan: 
          {
            interactive: true
          }
      };

      plot = $.plot("#placeholder", data, options);

    }

    choiceContainer.find("input").click(plotAccordingToChoices);

    plotAccordingToChoices();

  });

 </script>

<p id="peopleselect" class= "peopleselecter"></p>

<div id="content">

    <input type="radio" name="graphType" value="1" checked> Годовой график <br>
    <input type="radio" name="graphType" value="2" > Месячный график <br>

    <div class="demo-container">
      <div id="placeholder" class="demo-placeholder" style="float:left; width:850px; height: 460px;"></div>
      <p id="choices" style="float:right; width:280px;">
        <table id="choicestable" class= "legendtable">
          <tbody>
          </tbody>
        </table>
      </p>
    </div>

</div>