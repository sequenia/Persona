<script type="text/javascript">

  // Основаная концепция:
  // При каком-либо изменении на странице вызывается одна из трех функций:
  // accordingToChoicesCheck, accordingToChoicesChangePerson, accordingToChoicesGraphType.
  // В каждой из них вызывается фукнция сhoice(), которая из полного набора данных выбирает для отрисовки лишь те,
  // которым соответствует выбранные в чекбоксах графики.

  // Опции чекбоксов имеют такие же имена, как и ключи в хэше datasets и datasetsOtherPerson. 
  // В массив data забиваются лишь те данные из datasets и datasetsOtherPerson, ключи которых отмечены чекбоксами.
  // Затем, data подается в plot для отрисовки.

  // В зависимости от типа графика (Годовой, месячный, дневной), в datasets и datasetsOtherPerson 
  // содержатся соответствующие им данные.

  var CoefConvRubyToJSDate = 1000;         // Коэффициент перевода даты из руби формата в js формат

  var SinusCalculateStepYear  = 1000000;    // Шаг вычисления синуса для годового графика
  var SinusCalculateStepMonth = 100000;     // Шаг вычисления синуса для месечного графика
  var SinusCalculateStepDay   = 50000;       // Шаг вычисления синуса для дневного графика

  var MaxDateStr           = '2064-01-01'; // Максимальная дата
  var MaxDateStrYear       = '2064-01-01'; // Максимальная дата для годового графика
  var MaxDateStrMonth      = '2034-01-01'; // Максимальная дата для месячного графика
  var MaxDateStrDay        = '2024-01-01'; // Максимальная дата для дневного графика

  var yearPeriod  = 1;                     // Количество периодов синусоиды между двумя датами для годового графика
  var monthPeriod = 12;                    // Количество периодов синусоиды между двумя датами для месячного графика
  var dayPeriod   = 365;                   // Количество периодов синусоиды между двумя датами для дневного графика

  var graphTypeYear  = 1;                   // Идентификатор годового типа
  var graphTypeMonth = 2;                   // Идентификатор месячного типа
  var graphTypeDay   = 3;                   // Идентификатор дневного типа

  var data;                                // Данные для отрисовки. Глобальные, потому что заполняются везде
  
  var datasets = {};                       // Хэш с данными для отрисовки. Отсюда нужные данные будут перегоняться в data
  var datasetsOtherPerson = {};            // То же самое для второго человека
  var yearDatasets = {};                   // Годовые данные
  var monthDatasets = {};                  // Месячные данные
  var dayDatasets = {};                    // Дневные данные
  var yearDatasetsOtherPerson = {};
  var monthDatasetsOtherPerson = {};
  var dayDatasetsOtherPerson = {};

  var choiceTable;                         // DOM элемент для таблички выбора графиков первой персоны
  var choiceTableOtherPerson;              // DOM элемент для таблички выбора графиков второй персоны
  var otherPersons;                        // Список всех персон из базы данных

  var maxDateYear = Number(new Date(MaxDateStrYear)) / 1000;    // Максимальная дата для расчета годовых графиков
  var maxDateMonth = Number(new Date(MaxDateStrMonth)) / 1000;  // Максимальная дата для расчета месячных графиков
  var maxDateDay = Number(new Date(MaxDateStrDay)) / 1000;      // Максимальная дата для расчета дневных графиков

  var birthYear;                           // Год рождения первой персоны
  var birthYearOtherPerson;                // Год рождения второй персоны

  var DailyLookForward = 2;

  // Получить разницу между датами в годах
  function yearDifference(Date1, Date2)
  {
      var date1Year = Date1.getFullYear();
      var date2Year = Date2.getFullYear();
      var date1Month = Date1.getMonth();
      var date2Month = Date2.getMonth();
      var date1Day = Date1.getDate();
      var date2Day = Date2.getDate();

      var difference = date2Year - date1Year;

      if(date2Month < date1Month)
      {
          difference--;
      }
      else
      {
          if(date2Month == date1Month)
          {
              if(date2Day < date1Day)
              {
                  difference--;
              }
          }
      }

      return difference;
  }

  // Получить 16й код цвета по RBG
  function rgbToHex(R,G,B) {return toHex(R)+toHex(G)+toHex(B)}

  function toHex(n) 
  {
      n = parseInt(n,10);
      if (isNaN(n)) return "00";
      n = Math.max(0,Math.min(n,255));
      return "0123456789ABCDEF".charAt((n-n%16)/16)
        + "0123456789ABCDEF".charAt(n%16);
  }

  var redColor   = "#" + rgbToHex(150, 0, 0);
  var greenColor = "#" + rgbToHex(0, 150, 0);
  var blueColor  = "#" + rgbToHex(0, 0, 150);
  var grayColor  = "#" + rgbToHex(150, 150, 150);

  // Получить рандомное целое от min до max
  function getRandomInt(min, max)
  {
      return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  // Генерация массива с точками для синуса
  function genPointsToSinus(LeftEndPoint, MinPoint, RightEndPoint, Step, XCoeff, Offset, CoordZero)
  {
      MinPoint *= CoefConvRubyToJSDate;
      var Points = [];
      for(var i = LeftEndPoint - CoordZero; i < RightEndPoint - CoordZero; i += Step)
      {
          var x = (i + CoordZero) * CoefConvRubyToJSDate;
          if(x >= MinPoint)
              Points.push([x, Math.sin(XCoeff * i - Offset)]);
      }
      return Points;
  }

  // Генерация массива с точками (Минусы, Плюсы, Нули, Определившие период)
  function genOtherPoints(BirthDate, MinDate, MemoryDate1, MemoryDate2, EndPoint, Zero, T1, T2, dy)
  {

      var CtrlPoints  = [];
      var MinusPoints = [];
      var PlusPoints  = []; 
      var ZeroPoints  = [];

      MinDate *= CoefConvRubyToJSDate;

      var counter = 0;
      var IsPositive = false;

      if(MemoryDate1 * CoefConvRubyToJSDate >= MinDate)
          CtrlPoints.push([MemoryDate1 * CoefConvRubyToJSDate, dy]);
      if(MemoryDate2 * CoefConvRubyToJSDate >= MinDate)
          CtrlPoints.push([MemoryDate2 * CoefConvRubyToJSDate, dy]);

      for(var i = BirthDate; i < Zero; i += T2 / 2)
      {
          if(counter % 2 == 0)
          {
              if(i * CoefConvRubyToJSDate >= MinDate)
              {
                  if(IsPositive)
                  {
                      PlusPoints.push([i * CoefConvRubyToJSDate, dy]);
                  }
                  else 
                  {
                      MinusPoints.push([i * CoefConvRubyToJSDate, dy]);
                  }
              }
              IsPositive = !IsPositive;
          }
          else
          {
              if(i * CoefConvRubyToJSDate >= MinDate)
                  ZeroPoints.push([i * CoefConvRubyToJSDate,   dy]);
          }
          counter++;
      }

      for(var i = Zero; i <= EndPoint; i += T1 / 2)
      {
          if(counter % 2 == 0)
          {
              if(i * CoefConvRubyToJSDate >= MinDate)
              {
                  if(IsPositive)
                  {
                      PlusPoints.push([i * CoefConvRubyToJSDate, dy]);
                  }
                  else
                  {
                      MinusPoints.push([i * CoefConvRubyToJSDate, dy]);
                  }
              }
              IsPositive = !IsPositive;
          }
          else
          {   
              if(i * CoefConvRubyToJSDate >= MinDate)
                ZeroPoints.push([i * CoefConvRubyToJSDate,   dy]);
          }
          counter++;
      }

      var AllPoints = 
      {
          "CtrlPoints"  : CtrlPoints,
          "MinusPoints" : MinusPoints,
          "PlusPoints"  : PlusPoints,
          "ZeroPoints"  : ZeroPoints
      }

      return AllPoints;
  }

  // Генерация хэша с точками для дискретизации в необходимом для PLOT виде
  function pointsToLife(Label, Data, Color)
  {
      return {
        label: Label,
        data: Data,
        color: Color,
        xaxis: 1
      };
  }

  // Генерация хэша с точками для синусов в необходимом для плота виде
  function pointsToGraph(Data, Color, Symbol)
  {
      return { 
          data: Data,
          lines: { show: false },
          points: 
          { 
            show: true,
            radius: 3,
            lineWidth: 2, // in pixels
            fill: false,
            fillColor: Color,
            symbol: Symbol // or callback
          },
          color: Color,
          xaxis: 1
      };
  }

  // Создание хэша с данными о дискретизации, откуда они будут забиваться в хэш, принимаемый плотом
  function lifeInit(BirthDate, MinDate, EndPoint, personType, graphType)
  {
      var Graph  = {};
      var GraphPoints = [];
      var Points = [];

      var BDate  = new Date(BirthDate * CoefConvRubyToJSDate);
      var EndDate = new Date(EndPoint * CoefConvRubyToJSDate);
      var Multiply = ((BDate.getMonth() + 1) * 100 + BDate.getDate()) * BDate.getFullYear();
      var MultiplyStr = Multiply.toString();
      var counter = 0;
      var len = MultiplyStr.length;

      MinDate *= CoefConvRubyToJSDate;

      while(BDate < EndDate)
      {   
          if(BDate >= MinDate)
              GraphPoints.push([BDate.valueOf(), (MultiplyStr[counter].charCodeAt(0) - "0".charCodeAt(0)) / 4 + 2.5]);

          if(graphType == graphTypeYear)
          {
              BDate.setFullYear(BDate.getFullYear() + 1);
          }
          if(graphType == graphTypeMonth)
          {
              BDate.setMonth(BDate.getMonth() + 1);
          }
          if(graphType == graphTypeDay)
          {
              BDate.setDate(BDate.getDate() + 1);
          }
          counter++;
          if(counter == len) counter = 0;
      }

      if(personType == 1)
      {
        Graph["Sinus"] = 
        {
            data: GraphPoints,
            lines: { show: false },
            points: { show: true },
            dashes: { show: true, dashLength: 5, lineWidth: 1 },
            xaxis: 1
        };
      }
      else
      {
        Graph["Sinus"] = 
        {
            data: GraphPoints,
            lines: { show: true },
            points: { show: true },
            dashes: { show: false },
            xaxis: 1
        };
      }

      Graph["CtrlPoints"] = {xaxis: 1};
      Graph["Minus"] = {xaxis: 1};
      Graph["Plus"] = {xaxis: 1};
      Graph["Zero"] = {xaxis: 1};

      Graph["MinusLabel"] = {xaxis: 1};
      Graph["PlusLabel"] = {xaxis: 1};
      Graph["ZeroLabel"] = {xaxis: 1};

      return Graph;

  }

  // Создание легенды
  function labelInit(personType)
  {
      var Graph  = {};
      var Points = [];

      Graph["Sinus"] = {xaxis: 1};

      Graph["CtrlPoints"] = pointsToLife("Точки, определившие период синусоиды", Points, greenColor);
      Graph["Minus"] = pointsToLife("Минусы", Points, blueColor);
      Graph["Plus"] = pointsToLife("Плюсы", Points, redColor);
      Graph["Zero"] = pointsToLife("Нули", Points, grayColor);

      Graph["MinusLabel"] = {xaxis: 1};
      Graph["PlusLabel"] = {xaxis: 1};
      Graph["ZeroLabel"] = {xaxis: 1};

      return Graph;

  }

  // Создание линии для котрольного события
  function controlPointInit(personType, startDate, endDate)
  {

      var Graph  = {};
      var PointData = [];
      var controlDate;

      var DatePicker;
      if( personType == 0 )
      {
          DatePicker = document.getElementById("firstCustomDate").getElementsByClassName('input-medium')[0];
      }
      else
      {
          DatePicker = document.getElementById("secondCustomDate").getElementsByClassName('input-medium')[0];
      }

      if(DatePicker)
      {
          controlDate = (new Date(DatePicker.value)).valueOf();
          PointData.push([controlDate, -1.5]);
          PointData.push([controlDate, 5.5]);
      }

      var dashedOptions;
      var lineOptions;
      if(personType == 1)
      {
          dashesOptions = { show: true, dashLength: 5, lineWidth: 1 };
          lineOptions = false;
      }
      else
      {
          dashesOptions = { show: false };
          lineOptions = true;
      }

      Graph["Sinus"] = { 
          data: PointData,
          lines: { show: lineOptions },
          dashes: dashesOptions,
          points: 
          { 
            show: false
          },
          color: grayColor,
          xaxis: 1
      };

      Graph["CtrlPoints"] = {xaxis: 1};
      Graph["Minus"] = {xaxis: 1};
      Graph["Plus"] = {xaxis: 1};
      Graph["Zero"] = {xaxis: 1};

      Graph["MinusLabel"] = {xaxis: 1};
      Graph["PlusLabel"] = {xaxis: 1};
      Graph["ZeroLabel"] = {xaxis: 1};

      return Graph;
  }

  // Создание хэша с данными о дискретизации, откуда они будут загоняться в хэш, принимаемый флотом
  function graphInit(BirthDate, MinDate, MemoryDate1, MemoryDate2, EndPoint, period, personType)
  {
      var difference = yearDifference(new Date(MemoryDate1 * CoefConvRubyToJSDate), new Date(MemoryDate2 * CoefConvRubyToJSDate));
      var differenceCount = 1;
      var currentDifference = 12;
      var sinusCalculateStep;
      var Offset = Math.PI;

      while(currentDifference < difference)
      {
          differenceCount *= 2;
          currentDifference *= 2;
      }

      if(period == yearPeriod) 
      {
          sinusCalculateStep = SinusCalculateStepYear;
      }
      if(period == monthPeriod)
      {
          sinusCalculateStep = SinusCalculateStepMonth;
      }
      if(period == dayPeriod)
      {
          sinusCalculateStep = SinusCalculateStepDay;
          //Offset -= Math.PI * 0.5;
      }

      var Graph = {};
      var Zero = MemoryDate1;
      var T    = (MemoryDate2 - MemoryDate1) / (differenceCount * period);
      var XCoeff      = 2 * Math.PI / T;
      var GraphPoints = [];

      while(Zero - BirthDate > T * period)
      {
          Zero = Zero - T * period;
      }

      var PreXCoeff = period * 2 * Math.PI / (Zero - BirthDate);
      GraphPoints = GraphPoints.concat(
          genPointsToSinus(BirthDate, MinDate, Zero, sinusCalculateStep, PreXCoeff, Offset, Zero),
          genPointsToSinus(Zero, MinDate, EndPoint, sinusCalculateStep, XCoeff, Offset, Zero)
        );

      var OtherPoints = genOtherPoints(BirthDate, MinDate, MemoryDate1, MemoryDate2, EndPoint, Zero, T, (Zero - BirthDate) / period, 0);
      var PointsLabels = genOtherPoints(BirthDate, MinDate, MemoryDate1, MemoryDate2, EndPoint, Zero, T, (Zero - BirthDate) / period, 1.2);

      if(personType == 1)
      {
        Graph["Sinus"] = 
        {
            data: GraphPoints,
            lines: { show: false },
            points: { show: false },
            dashes: { show: true, dashLength: 5, lineWidth: 1 },
            xaxis: 1
        };
      }
      else
      {
        Graph["Sinus"] = 
        {
            data: GraphPoints,
            lines: { show: true },
            points: { show: false },
            dashes: { show: false },
            xaxis: 1
        };
      }

      Graph["CtrlPoints"] = pointsToGraph(OtherPoints["CtrlPoints"], greenColor, "circle");
      Graph["Minus"] = pointsToGraph(OtherPoints["MinusPoints"], blueColor, "circle");
      Graph["Plus"] = pointsToGraph(OtherPoints["PlusPoints"], redColor, "circle");
      Graph["Zero"] = pointsToGraph(OtherPoints["ZeroPoints"], grayColor, "circle");

      Graph["MinusLabel"] = pointsToGraph(PointsLabels["MinusPoints"], blueColor, "minus");
      Graph["PlusLabel"] = pointsToGraph(PointsLabels["PlusPoints"], redColor, "plus");
      Graph["ZeroLabel"] = pointsToGraph(PointsLabels["ZeroPoints"], grayColor, "circle");

      return Graph;

  }

  function getDate(DateWithSign)
  {
      return DateWithSign[0];
  }

  function getSign(DateWithSign)
  {
      return DateWithSign[1];
  }

  function getDescription(DateWithSign)
  {
      return DateWithSign[2];
  }

  function setLines(dataSets, Graph, label)
  {
      dataSets[label] = 
      {
          "Sinus" : Graph["Sinus"],
          "Minus" : Graph["Minus"],
          "Zero"  : Graph["Zero"],
          "Plus"  : Graph["Plus"],
          "CtrlPoints" : Graph["CtrlPoints"],

          "MinusLabel" : Graph["MinusLabel"],
          "PlusLabel"  : Graph["PlusLabel"],
          "ZeroLabel"  : Graph["ZeroLabel"]
      }
  }

  function genLabelStr(Date1, Date2)
  {
      var sign1 = getSign(Date1);
      var sign2 = getSign(Date2);
      var sign1Str = " - ";
      var sign2Str = " - ";

      if(sign1 == 1) sign1Str = "+";
      if(sign2 == 1) sign2Str = "+";

      return ("\"" + sign1Str + " " + sign2Str + "\" График ");
  }

  // Создать датасет для персоны с указанным периодом ( Массив с данными для флота )
  function createDatasets(BirthDate, MinDate, MaxDate, Dates, period, personType, graphType)
  {

      var Datasets = {};

      setLines(Datasets, lifeInit(BirthDate, MinDate, MaxDate, personType, graphType), "Дискретизация");

      setLines(Datasets, labelInit(personType), "Легенда");

      var graphCount = 1;

      function genAllLabels(isDifferent)
      {
          for(var i = 0; i < Dates.length - 1; i++)
          {
              for(var j = i + 1; j < Dates.length; j++)
              {
                  if( ( getSign(Dates[i]) != getSign(Dates[j]) ) == isDifferent && getDate(Dates[j]) && getDate(Dates[i]) )
                  {
                      var Graph = graphInit(BirthDate, MinDate, getDate(Dates[i]), getDate(Dates[j]), MaxDate, period, personType);

                      var label = genLabelStr(Dates[i], Dates[j]) + graphCount.toString() + " (";
                      label += 
                      (new Date(getDate(Dates[i]) * CoefConvRubyToJSDate)).toLocaleDateString() + ", " + 
                      (new Date(getDate(Dates[j]) * CoefConvRubyToJSDate)).toLocaleDateString() + ")";

                      setLines(Datasets, Graph, label);

                      graphCount++;
                  }
              }
          }
      }

      genAllLabels(true);
      genAllLabels(false);

      return Datasets;
  }

  function showDiv(elemId)
  {
    document.getElementById(elemId + "EditBirth").style.display = 'block';
    document.getElementById(elemId + "SaveButton").style.display = 'block';

    document.getElementById(elemId + "EditButton").style.display = 'none';
    document.getElementById(elemId + "ShowBirth").style.display = 'none';
  }

  // Забивает в датасеты второго человека и делает для него чекбоксы
  function recalcDailyGraphs(otherPersonId, personType)
  {
      var MaxDayDatePicker = document.getElementById("DailyMaxCustomise").getElementsByClassName('input-medium')[0];
      maxDateDay =  (new Date(MaxDayDatePicker.value)).valueOf() / 1000;

      var MinDayDatePicker = document.getElementById("DailyMinCustomise").getElementsByClassName('input-medium')[0];
      var minDateDay =  (new Date(MinDayDatePicker.value)).valueOf() / 1000;

      if(personType == 1)
          $.cookie("secondPersin", $('select[name=otherPersons]').val());
      else
          $.cookie("firstPersin", $('select[name=firstPersons]').val());

      var localChoiceTable;

      if(personType == 0)
      {
          localChoiceTable = choiceTable;
      }
      else
      {
          localChoiceTable = choiceTableOtherPerson;
      }  

      <% Person.all.each do |per| %>
          if(<%= per.id %> == otherPersonId)
          {
              var dates = <%= raw per.get_dates_with_signs %>;
              var birthDate = <%= per.get_birth %>;

              if(personType == 0)
              {
                  birthYear = new Date((new Date(birthDate * CoefConvRubyToJSDate)).getFullYear(), 0, 1);
                  dayDatasets = createDatasets(birthDate, minDateDay, maxDateDay, dates, dayPeriod, 0, graphTypeDay);
              }
              else
              {
                  birthYearOtherPerson = new Date((new Date(birthDate * CoefConvRubyToJSDate)).getFullYear(), 0, 1);
                  dayDatasetsOtherPerson = createDatasets(birthDate, minDateDay, maxDateDay, dates, dayPeriod, 1, graphTypeDay);
              }

              if(personType == 0)
              {
                $.each(yearDatasets, function(key, val)
                { 
                    if(key != "Легенда")
                    {
                        dayDatasets[key]["Sinus"].color = val["Sinus"].color;
                    }
                });
              }
              else
              {
                $.each(yearDatasetsOtherPerson, function(key, val)
                { 
                    if(key != "Легенда")
                    {
                        dayDatasetsOtherPerson[key]["Sinus"].color = val["Sinus"].color;
                    }
                });
              } 
          }
      <% end %>
  }

  // Забивает в датасеты второго человека и делает для него чекбоксы
  function upgradePlotByOtherPerson(otherPersonId, personType)
  {
      var MaxDayDatePicker = document.getElementById("DailyMaxCustomise").getElementsByClassName('input-medium')[0];
      maxDateDay =  (new Date(MaxDayDatePicker.value)).valueOf() / 1000;

      var MinDayDatePicker = document.getElementById("DailyMinCustomise").getElementsByClassName('input-medium')[0];
      var minDateDay =  (new Date(MinDayDatePicker.value)).valueOf() / 1000;

      if(personType == 1)
          $.cookie("secondPersin", $('select[name=otherPersons]').val());
      else
          $.cookie("firstPersin", $('select[name=firstPersons]').val());

      var choiceTableStr = "";

      var localChoiceTable;
      var localBirth;
      var localDates;
      var localName;
      var localCustomDate;

      if(personType == 0)
      {
          localName = $('#firstNameEdit');
          localBirth = $("#firstBirth");
          localDates = $("#firstDates");
          localCustomDate = $('#firstCustomDate');
          localChoiceTable = choiceTable;
      }
      else
      {
          localName = $('#secondNameEdit');
          localBirth = $("#secondBirth");
          localDates = $("#secondDates");
          localCustomDate = $('#secondCustomDate');
          localChoiceTable = choiceTableOtherPerson;
      }  

      localChoiceTable.empty();
      localBirth.empty();
      localDates.empty();
      localName.empty();
      localCustomDate.empty();

      <% Person.all.each do |per| %>
          if(<%= per.id %> == otherPersonId)
          {
              var dates = <%= raw per.get_dates_with_signs %>;
              var birthDate = <%= per.get_birth %>;
              var personInfo = "";
              var personName = "";
              var customDate = "";

              personName = '<%= link_to "Редактировать", edit_person_path(per), :class => "btn btn-primary btn-link btn-small" %> ' + 
        '<%= link_to 'Удалить', per, method: :delete, data: { confirm: 'Вы уверены?' }, :class => "btn btn-primary btn-link btn-small" %>';

              localName.append(personName);

              customDate = '<%= form_for Story.new do |f| %>' +
              '<b>Проверочное событие: </b> <%= f.date_field :date, :class=>'input-medium', :onchange => "choices();" %>' +
              '<% end %>';

              localCustomDate.append(customDate);

              if(personType == 0)
              {
                  birthYear = new Date((new Date(birthDate * CoefConvRubyToJSDate)).getFullYear(), 0, 1);
                  yearDatasets = createDatasets(birthDate, birthDate, maxDateYear, dates, yearPeriod, 0, graphTypeYear);
                  monthDatasets = createDatasets(birthDate, birthDate, maxDateMonth, dates, monthPeriod, 0, graphTypeMonth);
                  dayDatasets = createDatasets(birthDate, minDateDay, maxDateDay, dates, dayPeriod, 0, graphTypeDay);

                  personInfo = '<%= form_for per do |f| %>' +
                    '<div id = "firstShowBirth" style="display: block;" >' + 
                      '<b>Дата рождения: <%= per.birth.strftime("%d.%m.%Y") %></b>' + 
                    "</div>" + 
                    '<div id = "firstEditBirth" style="display: none;" >' +
                      '<b>Дата рождения: <%= f.date_field :birth, :class=>"input-medium" %></b>' +
                    '</div>' +
                    '<div id = "firstEditButton" class="btn btn-primary btn-link btn-small" onclick="showDiv(' + "'first'" +');">' + 
                       'Редактировать' + 
                    '</div>' +
                    '<div id = "firstSaveButton" style="display: none;" >' + 
                      '<%= f.submit :class => "btn btn-primary btn-link btn-small", :value => "Сохранить" %>' +
                    '</div>' +  
                    '<%end%>';
              }
              else
              {
                  birthYearOtherPerson = new Date((new Date(birthDate * CoefConvRubyToJSDate)).getFullYear(), 0, 1);
                  yearDatasetsOtherPerson = createDatasets(birthDate, birthDate, maxDateYear, dates, yearPeriod, 1, graphTypeYear);
                  monthDatasetsOtherPerson = createDatasets(birthDate, birthDate, maxDateMonth, dates, monthPeriod, 1, graphTypeMonth);
                  dayDatasetsOtherPerson = createDatasets(birthDate, minDateDay, maxDateDay, dates, dayPeriod, 1, graphTypeDay);

                  personInfo = '<%= form_for per do |f| %>' +
                    '<div id = "secondShowBirth" style="display: block;" >' + 
                      '<b>Дата рождения: <%= per.birth.strftime("%d.%m.%Y") %></b>' + 
                    "</div>" + 
                    '<div id = "secondEditBirth" style="display: none;" >' +
                      '<b>Дата рождения: <%= f.date_field :birth, :class=>"input-medium" %></b>' +
                    '</div>' +
                    '<div id = "secondEditButton" class="btn btn-primary btn-link btn-small" onclick="showDiv(' + "'second'" +');">' + 
                       'Редактировать' + 
                    '</div>' + 
                    '<div id = "secondSaveButton" style="display: none;" >' + 
                      '<%= f.submit :class => "btn btn-primary btn-link btn-small", :value => "Сохранить" %>' +
                    '</div>' + 
                    '<%end%>';
              }

              localBirth.append(personInfo);

              var strDates = "";
              strDates += "<b>Позитивные:<b><br/>" + 
                "<table class='table table-bordered table-condensed'>" +
                "<tr>" +
                  "<th>Описание</th>" +
                  "<th>Дата</th>" +
                  "<th>Действие</th>" +
                "</tr>" + 
                "<tbody>" +
                "<% for i in 0..per.get_dates_count - 1 %>" +
                "<% if per.stories[i].story_type == 1 %>" + 
                "<tr>" +
                  "<th><%= per.stories[i].description%></th>" +
                  '<%= form_for([per.stories[i].person, per.stories[i]]) do |f| %>' + 
                  '<th><%= f.date_field :date, :class=>'input-medium' %></th>' +
                  '<th>' + 
                            '<div style="float: left; width: auto;">' + 
                              '<%= f.submit :class => 'btn btn-primary btn-link btn-small', :value => 'Сохранить' %><%end%>' +
                            '</div>' +
                            '<div style="float: left; width: auto;">' +  
                              '<%= form_for([per.stories[i].person, per.stories[i]]) do |f| %>' + 
                                  '<%= f.hidden_field :date, :value => nil %>' + 
                                  '<%= f.submit :class => 'btn btn-primary btn-link btn-small', :value => 'Очистить' %>' + 
                              '<%end%>' +
                            '</div>' + 
                  '</th>' +
                "</tr>" +
                "<%end%>" + 
                "<%end%>" +
                "</tbody>" +
                "</table>" + 
                "<b>Негативные:<b><br/>" + 
                "<table class='table table-bordered table-condensed'>" +
                "<tr>" +
                  "<th>Описание</th>" +
                  "<th>Дата</th>" +
                  "<th>Действие</th>" +
                "</tr>" + 
                "<tbody>" +
                "<% for i in 0..per.get_dates_count - 1 %>" +
                "<% if per.stories[i].story_type == 0 %>" + 
                "<tr>" +
                  "<th><%= per.stories[i].description%></th>" +
                  '<%= form_for([per.stories[i].person, per.stories[i]]) do |f| %>' + 
                  '<th><%= f.date_field :date, :class=>'input-medium' %></th>' +
                  '<th>' + 
                            '<div style="float: left; width: auto;">' + 
                              '<%= f.submit :class => 'btn btn-primary btn-link btn-small', :value => 'Сохранить' %><%end%>' +
                            '</div>' +
                            '<div style="float: left; width: auto;">' +  
                              '<%= form_for([per.stories[i].person, per.stories[i]]) do |f| %>' + 
                                  '<%= f.hidden_field :date, :value => nil %>' + 
                                  '<%= f.submit :class => 'btn btn-primary btn-link btn-small', :value => 'Очистить' %>' + 
                              '<%end%>' +
                            '</div>' + 
                  '</th>' +
                "</tr>" +
                "<%end%>" + 
                "<%end%>" +
                "</tbody>" +
                "</table>";

              localDates.append(strDates);

              choiceTableStr += "<table class='legendtable'>";
              choiceTableStr += "<thead>";
              choiceTableStr += "<tr><th>Показать</th><th>Цвет</th><th>Подпись</th><th>Ссылка</th></tr>";
              choiceTableStr += "</thead>";

              if(personType == 0)
              {
                $.each(yearDatasets, function(key, val)
                { 
                    if(key != "Легенда")
                    {
                        var r = 0;
                        var g = 0;
                        var b = 0;
                        if(key != "Дискретизация")
                        {
                            r = getRandomInt(0, 255);
                            g = getRandomInt(0, 255);
                            b = getRandomInt(0, 255);
                        }
                        else
                        {
                            r = 0;
                            g = 0;
                            b = 0;
                        }

                        val["Sinus"].color = "#" + rgbToHex(r, g, b);
                        monthDatasets[key]["Sinus"].color = val["Sinus"].color;
                        dayDatasets[key]["Sinus"].color = val["Sinus"].color;

                        choiceTableStr += "<tr>";

                        choiceTableStr += 
                        "<td>" +
                            "<input type='checkbox' name='" + key + "' id='id" + key + "'></input>" +
                        "</td>" + 
                        "<td>" +
                            "<div style='width:14px; border:1px solid #ccc;padding:1px'>" + 
                              "<div style='width:4px;height:0;border:5px solid rgb(" + 
                              Math.floor(r).toString() + "," + 
                              Math.floor(g).toString() + "," + 
                              Math.floor(b).toString() +  
                              ");overflow:hidden'></div>" +
                            "</div>" + 
                        "</td>" +
                        "<td>" +
                            key +
                        "</td>" + 
                        "<td>" +
                            "<a href = '#'> Ссылка </a>" +
                        "</td>";

                        choiceTableStr += "</tr>";

                    }
                });
              }
              else
              {
                $.each(yearDatasetsOtherPerson, function(key, val)
                { 
                    if(key != "Легенда")
                    {
                        var r = 0;
                        var g = 0;
                        var b = 0;
                        if(key != "Дискретизация")
                        {
                            r = getRandomInt(0, 255);
                            g = getRandomInt(0, 255);
                            b = getRandomInt(0, 255);
                        }
                        else
                        {
                            r = 0;
                            g = 0;
                            b = 0;
                        }

                        val["Sinus"].color = "#" + rgbToHex(r, g, b);
                        monthDatasetsOtherPerson[key]["Sinus"].color = val["Sinus"].color;
                        dayDatasetsOtherPerson[key]["Sinus"].color = val["Sinus"].color;

                        choiceTableStr += "<tr>";

                        choiceTableStr += 
                        "<td>" +
                            "<input type='checkbox' name='" + key + "' id='id" + key + "'></input>" +
                        "</td>" + 
                        "<td>" +
                            "<div style='width:14px; border:1px solid #ccc;padding:1px'>" + 
                              "<div style='width:4px;height:0;border:5px solid rgb(" + 
                              Math.floor(r).toString() + "," + 
                              Math.floor(g).toString() + "," + 
                              Math.floor(b).toString() +  
                              ");overflow:hidden'></div>" +
                            "</div>" + 
                        "</td>" +
                        "<td>" +
                            key +
                        "</td>" +
                        "<td>" +
                            "<a href = '#'> Ссылка </a>" +
                        "</td>";

                        choiceTableStr += "</tr>";

                    }
                });
              } 
          }
      <% end %>

      choiceTableStr += "</table>";

      localChoiceTable.append(choiceTableStr);

      localChoiceTable.find("input").click(plotAccordingToChoicesCheck);
  }

  function setDataSet(DSet, DSetOtherPerson)
  {
      var otherPersonId = $('select[name=otherPersons]').val();
      var personId = $('select[name=firstPersons]').val();

      if(personId != -1)
      {
          datasets = DSet;
      }

      if(otherPersonId != -1)
      {
          datasetsOtherPerson = DSetOtherPerson;
      }
  }

  function pushToData(DSets, Key)
  {
      data.push(DSets[Key]["Sinus"]);
      data.push(DSets[Key]["Minus"]);
      data.push(DSets[Key]["Plus"]);
      data.push(DSets[Key]["Zero"]);
      data.push(DSets[Key]["CtrlPoints"]);

      data.push(DSets[Key]["MinusLabel"]);
      data.push(DSets[Key]["PlusLabel"]);
      data.push(DSets[Key]["ZeroLabel"]);
  }

  function choices()
  {
      var startDate;

      var MaxDayDatePicker = document.getElementById("DailyMaxCustomise").getElementsByClassName('input-medium')[0];
      maxDateDay =  (new Date(MaxDayDatePicker.value)).valueOf() / 1000;

      var maxDate;
      var graphType = $('input[name=graphType]:checked').val();

      var otherPersonId = $('select[name=otherPersons]').val();
      var personId = $('select[name=firstPersons]').val();

      if(otherPersonId == -1)
        birthYearOtherPerson = Number(new Date(MaxDateStr));   

      if(personId == -1)
        birthYear = Number(new Date(MaxDateStr)); 

      datasetsOtherPerson = {};
      datasets = {};

      if(graphType == graphTypeYear)
      {
          setDataSet(yearDatasets, yearDatasetsOtherPerson);
          maxDate = maxDateYear;
          startDate = Math.min(birthYear.valueOf(), birthYearOtherPerson.valueOf());
      }
      if(graphType == graphTypeMonth)
      {
          setDataSet(monthDatasets, monthDatasetsOtherPerson);
          maxDate = maxDateMonth;
          startDate = Math.min(birthYear.valueOf(), birthYearOtherPerson.valueOf());
      }
      if(graphType == graphTypeDay)
      {
          setDataSet(dayDatasets, dayDatasetsOtherPerson);
          maxDate = maxDateDay;
          var MinDayDatePicker = document.getElementById("DailyMinCustomise").getElementsByClassName('input-medium')[0];
          startDate = (new Date(MinDayDatePicker.value)).valueOf();
      }

      data = [];

      choiceTable.find("input:checked").each(function () 
      {
          var key = $(this).attr("name");
          if (key && datasets[key]) 
          {
              pushToData(datasets, key);
          }
      });

      choiceTableOtherPerson.find("input:checked").each(function () 
      {
          var key = $(this).attr("name");
          if (key && datasetsOtherPerson[key]) 
          {
              pushToData(datasetsOtherPerson, key);
          }

      });

      var firstPersonId = $('select[name=firstPersons]').val();
      var secondPersonId = $('select[name=otherPersons]').val();

      if(firstPersonId != -1 && secondPersonId == -1)
          pushToData(datasets, "Легенда");
      if(firstPersonId == -1 && secondPersonId != -1)
          pushToData(datasetsOtherPerson, "Легенда");
      if(firstPersonId != -1 && secondPersonId != -1)
          pushToData(datasets, "Легенда");

      var endDate = maxDate * CoefConvRubyToJSDate;
      var startDateDate = new Date(startDate);
      var labelStr = "";


      // Запихать проверочное событие
      data.push(controlPointInit(0, startDate, endDate)["Sinus"]);
      data.push(controlPointInit(1, startDate, endDate)["Sinus"]);

      var xticks = [];
      if(graphType == graphTypeYear)
      {
          for(i = new Date(startDate); i < new Date(endDate); i.setFullYear(i.getFullYear() + 1))
          {
              if( ( i.valueOf() == (new Date(startDate)).valueOf() ) || ( i.getFullYear() % 10 == 0 ) )
              {
                  xticks.push([i.valueOf(), "<b class='yearLabel'>" + i.getFullYear().toString() + "</b>"]);
              }
              else
              {
                  if(startDateDate.getFullYear() < 1960 &&
                     (i.getFullYear() % 10 == 1 || i.getFullYear() % 10 == 9 || i.getFullYear() == startDateDate.getFullYear() + 1))
                  {
                      labelStr = "";
                  }
                  else
                  {
                      labelStr = (i.getYear() % 10).toString();
                  }
                  xticks.push([i.valueOf(), labelStr]);
              }
          }
      }
      else
      {
          for(i = new Date(startDate); i < new Date(endDate); i.setMonth(i.getMonth() + 1))
          {
              if(i.getMonth() == 0 || i.valueOf() == (new Date(startDate)).valueOf())
              {
                  xticks.push([i.valueOf(), "<b class='monthLabel'>" + i.getFullYear().toString() + "</b>"]);
              }
              else if(i.getMonth() % 2 == 0)
              {
                  labelStr = i.getMonth().toString();
                  if(i.getMonth() <= 9 && i.getMonth() >= 3)
                  {
                      xticks.push([i.valueOf(), "<text class='monthLabel39'>" + labelStr + "</text>"]);
                  }
                  else
                  {
                      if(startDateDate.getFullYear() < 1993)
                      {
                          labelStr = "";
                      }
                      if(i.getMonth() > 9 )
                      {
                          xticks.push([i.valueOf(), "<text class='monthLabelMore9'>" + labelStr + "</text>"]);
                      }
                      else 
                      {
                          xticks.push([i.valueOf(), "<text class='monthLabelLess3'>" + labelStr + "</text>"]);
                      }
                  }
              }
          }
      }

      var options;

      options = 
      {
          lines: 
          {
              show: true,
              lineWidth: 1
          },
          yaxis:
          {
              show: true,
              panRange: [-1.5, 5.5],
              zoomRange: [1, 1],
              min: -1.5,
              max: 5.5,
              ticks: 
              [
                  [ 0, "" ], [ -1, ""], [1, ""], [2.5, "0"], 
                  [2.75, "1"], [3, "2"], [3.25, "3"], [3.5, "4"],
                  [3.75, "5"], [4, "6"], [4.25, "7"], [4.5, "8"],
                  [4.75, "9"]
              ]
          },
          xaxes: 
          [
              {
                  panRange: [startDate, endDate],
                  ticks: xticks,
                  position: 'bottom'
              }
          ],
          pan: 
          {
              interactive: true
          },
          zoom: 
          {
              interactive: true
          },
          legend: 
          {
              backgroundOpacity: 0.6 // set to 0 to avoid background
          }
      };

      var plot;
      plot = $.plot("#placeholder", data, options);

      if(graphType == graphTypeYear)
      {
          plot.zoom({ center: { left: -700, top: 1} });
      }
      if(graphType == graphTypeMonth)
      {
          plot.zoom({ center: { left: -1700, top: 1} });
      }
      if(graphType == graphTypeDay)
      {
          plot.zoom({ center: { left: -1700, top: 1} });
      }

  }

  function plotAccordingToChoicesCheck()
  {
      choices();
  } 

  function plotAccordingToChoicesDailyMaxCustomise()
  {
      var personId;
      var otherPersonId;
      personId = $('select[name=firstPersons]').val();
      otherPersonId = $('select[name=otherPersons]').val();

      recalcDailyGraphs(personId, 0);
      recalcDailyGraphs(otherPersonId, 1);

      choices();
  }

  // Внесение изменений на страницу (Чекбоксы, радиокнопки)
  // А так же отрисовка графа после изменений
  function plotAccordingToChoicesChangePerson(personType) 
  {
      var otherPersonId;
      if(personType == 0)
          otherPersonId = $('select[name=firstPersons]').val();
      else
          otherPersonId = $('select[name=otherPersons]').val();

      upgradePlotByOtherPerson(otherPersonId, personType);

      choices();
  }

  function plotAccordingToChoicesGraphType() 
  {
      //var otherPersonId = $('select[name=otherPersons]').val();

      //upgradePlotByOtherPerson(otherPersonId);

      choices();
  }

  $(function() {

      var MinDayDatePicker = document.getElementById("DailyMinCustomise").getElementsByClassName('input-medium')[0];
      var currentDate = new Date();
      MinDayDatePicker.value = (currentDate.getFullYear()).toString() + "-01-01";

      var MaxDayDatePicker = document.getElementById("DailyMaxCustomise").getElementsByClassName('input-medium')[0];
      currentDate = new Date();
      MaxDayDatePicker.value = (currentDate.getFullYear() + DailyLookForward).toString() + "-01-01";

      var htmlStr = "";

      otherPersons = []; 

      var prevFirst = $.cookie("firstPersin");
      var prevSecond = $.cookie("secondPersin");

      <% Person.all.each do |per| %>
          otherPersons.push(["<%= raw per.id %>", "<%= raw per.name.to_s %>"]);
      <% end %>

      var personSelecter = $("#firstPersons");
      htmlStr += "<option value=" +  "-1" +  ">" + "Без первой персоны" + "</option>";
      for(var i = 0; i < otherPersons.length; i++)
      {
          if( otherPersons[i][0] == prevFirst )
          {
              htmlStr += "<option value=" +  otherPersons[i][0].toString() +  " selected='selected' >" + otherPersons[i][1] + "</option>";
          }
          else
          {
              htmlStr += "<option value=" +  otherPersons[i][0].toString() +  ">" + otherPersons[i][1] + "</option>";
          }
      }
      personSelecter.append(htmlStr);

      htmlStr = "";
      personSelecter = $("#otherPersons");
      htmlStr += "<option value=" +  "-1" +  ">" + "Без второй персоны" + "</option>";
      personSelecter.append(htmlStr);

      choiceTable = $("#choicestable");
      choiceTableOtherPerson = $("#choicestableotherperson");

      plotAccordingToChoicesChangePerson(0);

      htmlStr = "";
      for(var i = 0; i < otherPersons.length; i++)
      {
          if( otherPersons[i][0] == prevSecond )
          {   
              htmlStr += "<option value=" +  otherPersons[i][0].toString() +  " selected='selected' >" + otherPersons[i][1] + "</option>";
          }
          else
          {
              htmlStr += "<option value=" +  otherPersons[i][0].toString() +  ">" + otherPersons[i][1] + "</option>";
          }
      }
      personSelecter.append(htmlStr);

      plotAccordingToChoicesChangePerson(1);

  });

 </script>

<div id="content">

    <div class="demo-container">
      <div id="placeholder" class="demo-placeholder" style="float:left; height: 420px;"></div>
    </div>

    <b>Тип графика:</b><br/>
    <input id = "graphType1" type="radio" name="graphType" value=1 onClick="plotAccordingToChoicesGraphType()" checked> Годовой график <br>
    <input id = "graphType2" type="radio" name="graphType" value=2 onClick="plotAccordingToChoicesGraphType()"> Месячный график </br>
    <input id = "graphType3" type="radio" name="graphType" value=3 onClick="plotAccordingToChoicesGraphType()"> Дневной график <br/><br/>

    <b>Настройки:</b><br/>
    <div id = "DailyMinCustomise" name = "DailyMinCustomise">
      <%= form_for Story.new do |f| %>
          Начало расчета дневного графика: <%= f.date_field :date, :class=>'input-medium', :onchange => "plotAccordingToChoicesDailyMaxCustomise();" %>
      <% end %>
    </div>

    <div id = "DailyMaxCustomise" name = "DailyMaxCustomise">
      <%= form_for Story.new do |f| %>
          Предел расчета дневного графика: <%= f.date_field :date, :class=>'input-medium', :onchange => "plotAccordingToChoicesDailyMaxCustomise();" %>
      <% end %>
    </div>

</div>